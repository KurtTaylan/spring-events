buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "io.spring.dependency-management" version "0.5.6.RELEASE"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot' 

jar {
    baseName = 'spring-events'
    version = '1.0.0-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.assertJVersion         = '3.3.0'
ext.h2Version              = '1.4.191'
ext.htmlunitVersion        = '2.20'
ext.jacksonDateTimeVersion = '2.7.3'
ext.jsonpathVersion        = '2.2.0'
ext.lombokVersion          = '1.16.8'
ext.seleniumVersion        = '2.52.0'
ext.springBootVersion      = '1.3.3.RELEASE'
ext.springVersion          = '4.2.5.RELEASE'
ext.springSecurityVersion  = '4.0.4.RELEASE'
ext.springComposedVersion  = '1.0.0.BUILD-SNAPSHOT'
ext.testNGVersion          = '6.9.10'

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-web")

    compile("org.projectlombok:lombok:${lombokVersion}")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonDateTimeVersion}")
    compile("com.h2database:h2:${h2Version}")
    compile("org.springframework.composed:spring-composed:${springComposedVersion}")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.security:spring-security-test:${springSecurityVersion}")
    testCompile("org.assertj:assertj-core:${assertJVersion}")
    testCompile("com.jayway.jsonpath:json-path:${jsonpathVersion}")
    testCompile("net.sourceforge.htmlunit:htmlunit:${htmlunitVersion}")
    testCompile("org.seleniumhq.selenium:selenium-htmlunit-driver:${seleniumVersion}")
    testCompile("org.testng:testng:${testNGVersion}")
}

configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.group == "org.springframework.boot") {
			details.useVersion springBootVersion
		}
		if (details.requested.group == "org.springframework") {
			details.useVersion springVersion
		}
		if (details.requested.group == "org.springframework.security") {
			details.useVersion springSecurityVersion
		}
	}
}

task testNG(type: Test) {
	description = 'Runs TestNG unit and integration tests.'
	useTestNG()
	scanForTestClasses = false
	include(["**/*TestNg*IT.class", "**/*TestNg*Test.class"])
	// Show STD_OUT & STD_ERR of the test JVM(s) on the console:
	// testLogging.showStandardStreams = true
	// forkEvery 1
}

test {
	description = 'Runs JUnit unit tests.'
	dependsOn testNG
	useJUnit()

	scanForTestClasses = false
	include(["**/*Tests.class", "**/*Test.class"])
	exclude '**/*TestNg*.*'
	// Since we set scanForTestClasses to false, we need to filter out inner
	// classes with the "$" pattern; otherwise, using -Dtest.single=MyTests to
	// run MyTests by itself will fail if MyTests contains any inner classes.
	exclude(["**/Abstract*.class", '**/*$*'])
}

task integrationTest(type: Test) {
	description = 'Runs JUnit integration tests.'
	dependsOn test
	useJUnit()
	include '**/*IT.class'
	exclude '**/*TestNg*.*'
}

task aggregateTestReports(type: TestReport) {
	description = 'Aggregates JUnit and TestNG test reports.'
	destinationDir = test.reports.html.destination
	reportOn test, testNG, integrationTest
}

check.dependsOn aggregateTestReports

task wrapper(type: Wrapper) {
	gradleVersion = '2.13'
}
